{"version":3,"sources":["Dictionary.js","App.js","reportWebVitals.js","index.js"],"names":["Dictionary","props","useState","defaultKeyword","keyword","setKeyword","ready","dictionary","setDictionary","handleResponse","response","console","log","data","word","text","phonetic","apiSearch","apiUrl","axios","get","then","className","Row","Col","xs","Form","onSubmit","event","preventDefault","type","placeholder","onChange","target","value","Button","Card","Body","href","icon","faVolumeUp","color","height","width","timeout","library","add","App","src","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sWAae,SAASA,EAAWC,GAC/B,MAA8BC,mBAASD,EAAME,gBAA7C,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAoCH,mBAAS,CAACI,OAAO,IAArD,mBAAOC,EAAP,KAAmBC,EAAnB,KAEA,SAASC,EAAeC,GACpBC,QAAQC,IAAIF,EAASG,KAAK,IAC1BL,EAAc,CACVF,OAAO,EACPQ,KAAMJ,EAASG,KAAK,GAAGC,KACvBC,KAAML,EAASG,KAAK,GAAGG,WAI/B,SAASC,IACL,IAAMC,EAAM,6DAAyDd,GACrEO,QAAQC,IAAIM,GACZC,IAAMC,IAAIF,GAAQG,KAAKZ,GAY/B,OAAIF,EAAWD,MAEP,sBAAKgB,UAAU,aAAf,UACI,cAACC,EAAA,EAAD,CAAKD,UAAU,qBAAf,SACI,cAACE,EAAA,EAAD,CAAKF,UAAU,SAASG,GAAG,OAA3B,SACI,eAACC,EAAA,EAAD,CAAMC,SAdtB,SAAsBC,GAClBA,EAAMC,iBACNZ,KAYY,UACI,uBAAOa,KAAK,SAASC,YAAY,wBAAwBT,UAAU,sBAC5DU,SAX3B,SAA6BJ,GACzBvB,EAAWuB,EAAMK,OAAOC,UAWR,cAACC,EAAA,EAAD,CAAQL,KAAK,SAASR,UAAU,sBAAhC,oBACA,mBAAGA,UAAU,OAAb,+CAIZ,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAKF,UAAU,cAAf,SACI,cAACc,EAAA,EAAD,CAAMd,UAAU,kBAAhB,SACI,cAACc,EAAA,EAAKC,KAAN,UACI,sBAAKf,UAAU,uBAAf,UACI,+BAAKf,EAAWO,KAAhB,IAAsB,mBAAGwB,KAAK,IAAR,SAAY,cAAC,IAAD,CAAiBC,KAAMC,WACzD,6BAAKjC,EAAWQ,sBAS5CE,IAEI,cAAC,IAAD,CACIa,KAAK,WACLW,MAAM,UACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,OAlErBC,IAAQC,IAAIN,KCMGO,MAbf,WACE,OACE,sBAAKzB,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACI,qBAAK0B,IAAI,kBAAkBC,IAAI,WAEjC,+BACI,cAAC,EAAD,CAAY9C,eAAgB,iBCEzB+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3c2998ae.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport axios from \"axios\";\nimport {Button, Col, Form, Row, Card, } from 'react-bootstrap';\nimport Loader from \"react-loader-spinner\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faVolumeUp } from '@fortawesome/free-solid-svg-icons';\nimport \"./Dictionary.css\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nlibrary.add(faVolumeUp)\n\n\nexport default function Dictionary(props) {\n    const [keyword, setKeyword] = useState(props.defaultKeyword);\n    const [dictionary, setDictionary] = useState({ready: false,});\n\n    function handleResponse(response) {\n        console.log(response.data[0])\n        setDictionary({\n            ready: true,\n            word: response.data[0].word,\n            text: response.data[0].phonetic,\n        })\n    }\n\n    function apiSearch(){\n        const apiUrl = `https://api.dictionaryapi.dev/api/v2/entries/en_US/${keyword}`;\n        console.log(apiUrl)\n        axios.get(apiUrl).then(handleResponse);\n    }\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        apiSearch();\n    }\n\n    function changeSubmittedWord(event) {\n        setKeyword(event.target.value);\n    }\n\nif (dictionary.ready) {\n    return (\n        <div className=\"Dictionary\">\n            <Row className=\"align-items-center\">\n                <Col className=\"col-12\" xs=\"auto\">\n                    <Form onSubmit={handleSubmit}>\n                        <input type=\"search\" placeholder=\"Look up for a word...\" className=\"m-2 Dictionary-form\"\n                               onChange={changeSubmittedWord}/>\n                        <Button type=\"submit\" className=\" m-3 Dictionary-btn\">Search</Button>\n                        <p className=\"ps-0\">e.g music, sunset, code...</p>\n                    </Form>\n                </Col>\n            </Row>\n            <Row>\n                <Col className=\"col-12 mt-3\">\n                    <Card className=\"Dictionary-card\">\n                        <Card.Body>\n                            <div className=\"Dictionary-body ms-2\">\n                                <h1>{dictionary.word} <a href=\"#\"><FontAwesomeIcon icon={faVolumeUp} /></a></h1>\n                                <h2>{dictionary.text}</h2>\n                            </div>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </div>\n    )\n} else {\n    apiSearch();\n    return (\n        <Loader\n            type=\"TailSpin\"\n            color=\"#546b33\"\n            height={100}\n            width={100}\n            timeout={6000} \n        />\n    )\n}\n\n}","import './App.css';\nimport Dictionary from \"./Dictionary\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <img src=\"./book-logo.png\" alt=\"logo\"/>\n      </header>\n        <main>\n            <Dictionary defaultKeyword={\"sunset\"}/>\n        </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}